#!/usr/bin/env bash
#set -x

# Default parameters
version=22.09.1
time_start=$(date +%s)
threads=$(command -v nproc --all &> /dev/null && nproc || echo 1)
lettercase=0
frame=1
translate_table=1
max_orf_num=0
verbose=0

# Cleanup temp files
script_pid=$(echo $$)
cleanup(){
 rm --force /tmp/fastakit$script_pid.*
}
trap cleanup EXIT

function print_usage(){
 printf "
fastakit [OPTIONS] [Sequence.fasta | stdin]
	-o | --out	Output to file (otherwise to stdout)
	-i | --in-place	Modify file in-place
	-c | --complement	Complementary sequence
	-m | --reverse_seq	Reverse sequence
	--unique	Remove duplicate sequences
	--multi #	Convert to multi-line FASTA (nucleotide only)
	--random	Create random sequences of respective length
	-n | --name_sort	Sort FASTA by name
	-l | --length_sort	Sort FASTA by sequence length (shortest to longest)
	-r | --reverse_sort	Sort in reverse order
	--upper	Sequences to uppercase
	--lower	Sequences to lowercase
	-g | --orf	Retrieve ORFs
	--max_orf_num #	Maximum number of ORFs to output per sequence
	-p | --translate	Protein sequences in current frame
	--table #	Translation code (Default = standard code)
	--frame #	Frame to extract codons (Any of frames 1,2,3,4,5,6; 0 = six frames; Default = 1)
	--gc	Calculate percent GC per sequence (Disables --translate)
	--mw	Calculate the moleculare weight of DNA/RNA/protein per sequence (ss ds)
	--separate DIR	Separate sequnces into files in directory DIR
	--nonnuc	Non-ACTGU characters (0 ignored)
	--rna_dna	Convert RNA to DNA / DNA to RNA (Default = no conversion)
	--seq_range #,#	Minimum/Maximum sequence size (e.g. 10,50 ; 0 to ignore)
	--max_seq Return the # of largest sequences for each input sequence (ORFs, proteins, etc.)
	--check	Check if FASTA file is single line
	--makebed	Create BED output for ORFs (Assumes --orf)
	--upstream #	Retrieve # size upstream flanking sequence of ORFs (Assumes --orf)
	--downstream #	Retrieve # size downstream flanking sequence of ORFs (Assumes --orf)
	--detect	Detect molucule and exit
	--re string,#,#,#,#	Detect restriction enzyme recognition sites (Restriction enzyme name, min_length, max_length, min_number, max_number; 0 to ignore; 'list' to list all enzymes)
	-t | --threads #	Number of CPU threads to use (Default = Detected processors or 1)
	-v | --verbose	Verbose
	-h | --help	Display help
	--stats	Calculate basic stats
	--version	Print version date


	Available translation codes:
	1 - Standard code
	2 - Vertebrate Mitochondrial code
	3 - Yeast mitochondrial code
	4 - Mold, protozoan, and coelenterate mitochondrial code and the mycoplasma/spiroplasma code
	
"
}

# Check arguments
while [ "$#" -gt 0 ]
do
arg=$1
 case $arg in
  -o | --out)
  out=1 # Output to file
  output_file=$2
  shift 2
  ;;
  -i | --in-place)
  inplace=1 # Modify file in-place
  shift
  ;;
  --unique)
  unique=1 # Remove duplicate sequences
  shift
  ;;
  -n | --name_sort)
  name_sort=1 # Sort FASTA file by name
  shift
  ;;
  --random)
  random=1 # Sort FASTA file by name
  shift
  ;;
  -l | --length_sort)
  length_sort=1 # Sort FASTA file by sequence length
  shift
  ;;
  -r | --reverse_sort)
  reverse_sort=1 # Sort in reverse order
  shift
  ;;
  --upper)
  lettercase=1 # Sequences to uppercase
  shift
  ;;
  --lower)
  lettercase=2 # Sequences to lowercase
  shift
  ;;
  -c | --complement)
  complement=1 # Complementary sequences
  shift
  ;;
  -m | --reverse_seq)
  rev_seq=1 # Reverse sequences
  shift
  ;;
  --frame) # Set frame for codons
  frame=($(sed 's/,/ /g' <(echo $2)))
  shift 2
  ;;
  -g | --orf)
  orf=1 # Sequence from first ATG in frame
  shift
  ;;
  --max_orf_num)
  max_orf_num=$2 # Maximum number of ORFs per sequence
  shift 2
  ;;
  -p | --translate)
  translate=1 # Translate sequences
  shift
  ;;
  --gc)
  percent_GC=1 # Get percent GC per sequence
  shift
  ;;
  --rna_dna)
  rna_dna=1 # Convert RNA to DNA / DNA to RNA
  shift
  ;;
  --nonnuc)
  nonnuc=1 # Count non-ACTGU characters
  shift
  ;;
  --separate)
  separate=$2 # Separate sequnces into files
  shift 2
  ;;
  --table)
  translate_table=$2 # Alternative translation table
  shift 2
  ;;
  --max_seq)
  max_seq=$2 # Return # of largest proteins
  shift 2
  ;;
  --version)
  echo "fastakit version "$version > $(readlink /proc/$$/fd/2)
  exit 0
  ;;
  --check)
  check_sl=1
  shift
  ;;
  --detect)
  detect=1
  shift
  ;;
  --seq_range)
  OFS=$IFS
  IFS=","
  seq_range=($(echo "$2")) # Minimum/Maximum nucleotide sequence size
  IFS=$OFS
  if [ ${seq_range[0]} -eq 0 ] && [ ${seq_range[1]} -eq 0 ]
  then
   unset seq_range
  fi
  shift 2
  ;;
  -t | --threads)
  threads=$2 # Number of CPU threads
  shift 2
  ;;
  --stats)
  stats=1 # Calculate basic stats
  shift
  ;;
  --multi)
  multi=$2 # Covert to multiline FASTA
  shift 2
  ;;
  --makebed)
  makebed=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
  orf=1
  shift
  ;;
  --upstream)
  upstream=$2
  shift 2
  ;;
  --downstream)
  downstream=$2
  shift 2
  ;;
  --mw)
  MW=1
  shift
  ;;
  --re)
  renz=1
  OFS=$IFS
  IFS=","
  min_max_re=($(echo "$2")) # Minimum/Maximum re length/number
  IFS=$OFS
  shift 2
  ;;
  -v | --verbose)
  verbose=1 # Print file names and arguments
  shift
  ;;
  -h | --help)
  print_usage
  exit 1
  ;;
  *)
  if [ -f "$1" ]
  then
   break
  else
  echo "Unknown option: "$1
  print_usage
  exit 1
  fi
  ;;
  esac
  done
  
  # Check dependencies
  if ! command -v gawk &> /dev/null
  then
   echo "gawk not installed" > $(readlink /proc/$$/fd/2)
   echo "Install using:" > $(readlink /proc/$$/fd/2)
   echo "sudo apt install gawk" > $(readlink /proc/$$/fd/2)
  exit 1
  fi
  
  if ! command -v perl &> /dev/null
  then
   echo "perl not installed" > $(readlink /proc/$$/fd/2)
   echo "Install using:" > $(readlink /proc/$$/fd/2)
   echo "sudo apt install perl" > $(readlink /proc/$$/fd/2)
  exit 1
  fi
  
  if ! command -v parallel &> /dev/null
  then
   echo "parallel not installed" > $(readlink /proc/$$/fd/2)
   echo "Install using:" > $(readlink /proc/$$/fd/2)
   echo "sudo apt install parallel" > $(readlink /proc/$$/fd/2)
  exit 1
  fi
  
  # Time function
  function show_time(){
    num=$(($(date +%s) - time_start))
    min=0
    hour=0
    day=0
    if((num>59));then
        ((sec=num%60))
        ((num=num/60))
        if((num>59));then
            ((min=num%60))
            ((num=num/60))
            if((num>23));then
                ((hour=num%24))
                ((day=num/24))
            else
                ((hour=num))
            fi
        else
            ((min=num))
        fi
    else
        ((sec=num))
    fi
    echo -e "$day"d "$hour"h "$min"m "$sec"s"\n" > $(readlink /proc/$$/fd/2)
}

  # Translation function
  function translate(){
	input=$1 &&
	cat $input |
	sed --regexp-extended \
        's/a[tu]g/M/gi;
         s/a[tu][tuc]/I/gi;
         s/ac[actug]/T/gi;
         s/aa[tuc]/N/gi;
         s/aa[ag]/K/gi;
         s/ag[tuc]/S/gi;
         s/[tu][tu][tuc]/F/gi;
         s/[tu][tu][ag]/L/gi;
         s/[tu]c[acgtu]/S/gi;
         s/[tu]a[tuc]/Y/gi;
         s/[tu]a[ag]/*/gi;
         s/[tu]g[tuc]/C/gi;
         s/[tu]gg/W/gi;
         s/cc[acgtu]/P/gi;
         s/ca[tuc]/H/gi;
         s/ca[ag]/Q/gi;
         s/cg[gtu]/R/gi;
         s/g[tu][acgtu]/V/gi;
         s/gc[acgtu]/A/gi;
         s/ga[tcu]/D/gi;
         s/ga[ag]/E/gi;
         s/gg[acgtu]/G/gi' |
         
         # Standard code
         if [[ $translate_table = 1 ]]
         then
          sed --regexp-extended \
           's/a[tu]a/I/gi;
            s/ag[ag]/R/gi;
            s/c[tu][acgtu]/L/gi;
            s/cg[ac]/R/gi;
            s/[tu]ga/*/gi;'
       
         # Vertebrate mitochondrial code
         elif [[ $translate_table = 2 ]]
         then
          sed --regexp-extended \
           's/a[tu]a/M/gi;
            s/ag[ag]/*/gi;
            s/c[tu][acgtu]/L/gi;
            s/cg[ac]/R/gi;
            s/[tu]ga/W/gi;'
       
         # Yeast mitochondrial code
         elif [[ $translate_table = 3 ]]
          then
          sed --regexp-extended \
           's/a[tu]a/M/gi;
            s/ag[ag]/R/gi;
            s/c[tu][acgtu]/T/gi;
            s/cg[ac]/X/gi;
            s/[tu]ga/W/gi;'
       
         # Mold, protozoan, and coelenterate mitochondrial code and the mycoplasma/spiroplasma code
         elif [[ $translate_table = 4 ]]
          then
           sed --regexp-extended \
            's/a[tu]a/I/gi;
             s/ag[ag]/R/gi;
             s/c[tu][acgtu]/L/gi;
             s/cg[ac]/R/gi;
             s/[tu]ga/M/gi;'
          else
           echo "Error: Unknown translation code"
           tables
           exit 1
         fi
         MOLECULE="PROTEIN"
}
  
  # Residue weights
  function calc_MW(){
	strand=$1
	cat $2 |
	if [[ $MOLECULE == "PROTEIN" ]]
	then
	 tr --delete "*Xx" |
	 parallel -k -j"$threads" --block 30M --pipe 'sed --regexp-extended \
         "s/M/131.1926 /gi;
          s/I/113.1594 /gi;
          s/T/101.1051 /gi;
          s/N/114.1038 /gi;
          s/K/128.1741 /gi;
          s/S/87.0782 /gi;
          s/F/147.1766 /gi;
          s/L/113.1594 /gi;
          s/Y/163.176 /gi;
          s/C/103.1388 /gi;
          s/W/186.2132 /gi;
          s/P/97.1167 /gi;
          s/H/137.1411 /gi;
          s/Q/128.1307 /gi;
          s/R/156.1875 /gi;
          s/V/99.1326 /gi;
          s/A/71.0788 /gi;
          s/D/115.0886 /gi;
          s/E/129.1155 /gi;
          s/G/57.0519 /gi;
          s/ $//g"' |
          awk -F ' ' '{for(i=1;i<=NF;i++) t+=$i; printf "%.5f\n", t+18.01528; t=0}'
         elif [[ $MOLECULE == "DNA" ]]
         then
         if [ $strand -eq 1 ]
         then
          parallel -k -j"$(($threads/2))" --block 30M --pipe 'sed --regexp-extended \
          "s/a/313.20672 /gi;
           s/t/304.19322 /gi;
           s/c/289.18182 /gi;
           s/g/329.20592 /gi;
           s/ $//g;"' |
           awk -F ' ' '{for(i=1;i<=NF;i++) t+=$i; printf "%.5f\n", t+18.01528; t=0}'
         else 
          parallel -k -j"$(($threads/2))" --block 30M --pipe 'sed --regexp-extended \
          "s/[at]/313.20672 304.19322 /gi;
           s/[cg]/289.18182 329.20592 /gi;
           s/ $//g;"' |
           awk -F ' ' '{for(i=1;i<=NF;i++) t+=$i; printf "%.5f\n", t+(2*18.01528); t=0}'
         fi
         elif [[ $MOLECULE == "RNA" ]]
         then
         if [ $strand -eq 1 ]
         then
          parallel -k -j"$(($threads/2))" --block 30M --pipe 'sed --regexp-extended \
          "s/a/313.20672 /gi;
           s/u/306.16602 /gi;
           s/c/289.18182 /gi;
           s/g/329.20592 /gi;
           s/ $//g;"' |
           awk -F ' ' '{for(i=1;i<=NF;i++) t+=$i; printf "%.5f\n", t+18.01528; t=0}'
          else
           parallel -k -j"$(($threads/2))" --block 30M --pipe 'sed --regexp-extended \
          "s/[au]/313.20672 306.16602 /gi;
           s/[cg]/289.18182 329.20592 /gi;
           s/ $//g;"' |
           awk -F ' ' '{for(i=1;i<=NF;i++) t+=$i; printf "%.5f\n", t+18.01528; t=0}'
          fi
          fi
     }
     
     function detect_mol(){
     local input=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
     head --bytes=5000000 $1 > $input
     if $(awk '{IGNORECASE=1; seq=length($0); gsub("[actgun]","",$0)}; length($0)/seq > 0.25{exit 1}' $input)
     then
      export MOL=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
      export input
      parallel -j2 --halt now,success=1 ::: \
      'grep --ignore-case --max-count=1 "T" $input > /dev/null && echo "DNA" > $MOL' \
      'grep --ignore-case --max-count=1 "U" $input > /dev/null && echo "RNA" > $MOL' &> /dev/null
      MOLECULE=$(cat $MOL)
     else
      MOLECULE="PROTEIN"
     fi
     if [ ! -z ${detect+x} ]; then echo $MOLECULE; fi
     if [ $verbose -eq 1 ]; then echo "Detected molecule: "$MOLECULE > $(readlink /proc/$$/fd/2); fi
     }
     
     function res_enz(){
      local input=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
      local reout=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
      local enztmp=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
      local is_enz='[[:alpha:]]'
      cut --fields=2 $1 > $input
      local enz_name=$2
      local repat_min=$3
      local repat_max=$4
      local resites_min=$5
      local resites_max=$6
      
      # Get list of all restriction enzymes and their regex pattern
      if [ -f $(echo $(dirname $(readlink --canonicalize $(which fastakit)))"/neb_rebase") ]
      then
       local retmp=$(echo $(dirname $(readlink --canonicalize $(which fastakit)))"/neb_rebase")
      else
       reheads=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
       repat=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
       retmp=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
       if [ $verbose -eq 1 ]; then echo "Downloading restriction enzyme recognition sites..." > $(readlink /proc/$$/fd/2); fi
       wget --quiet --show-progress --output-document=- ftp://ftp.neb.com/pub/rebase/withref.txt |
       grep --perl-regexp "\<1\>|\<5\>" |
       tr --delete "\n" |
       sed --regexp-extended 's/<1>/\n/g; s/<5>/\t/g' |
       grep --invert-match "?" |
       tee $reheads |
       cut --fields=2 |
       sed --regexp-extended \
       's/[?/\^()]//g;
       s/[0-9]//g;
       s/[-]//g;
       s/,/|/g;
       s/n/[actgu]/gi;
       s/r/[ag]/gi;
       s/y/[ctu]/gi;
       s/m/[ac]/gi;
       s/k/[gtu]/gi;
       s/s/[gc]/gi;
       s/w/[atu]/gi;
       s/b/[cgtu]/gi;
       s/d/[agtu]/gi;
       s/h/[actu]/gi;
       s/v/[acg]/gi' |
       grep --perl-regexp --invert-match "^$" > $repat
       paste <(cut --fields=1 $reheads | grep --perl-regexp --invert-match "^$") $repat |
       sort --field-separator=$'\t' --key=2,2 |
       uniq --skip-fields=1 --group="both" > $retmp
       paste <(cut --fields=1 $retmp | tr "\n" ";" | sed --regexp-extended 's/;;/\n/g; s/^;//g') <(cut --fields=2 $retmp | grep -v "^$" | uniq) > $repat
       retmp=$repat
       fi
       
       if [[ $enz_name =~ "list" ]]
       then
        cut --fields=1 $retmp |
        tr ";" "\n"
        exit 0
       fi
       
       # Create search arrays
       if [[ $enz_name =~ $is_enz ]]
       then
        repat_tmp=($(grep --ignore-case --perl-regexp '^'"$enz_name"'[\t;]|;'"$enz_name"'[\t;]' $retmp | tr "\t" " "))
        reheads=${repat_tmp[0]}
        repat=${repat_tmp[1]}	
        local repat_min=0
        local repat_max=0
       else
        repat=($(cut --fields=2 $retmp | tr "\n" " "))
        reheads=($(cut --fields=1 $retmp | tr "\n" " "))        
       fi
       
      # Loop over all restriction enzymes
       for ((re=0; re <= $((${#repat[@]} - 1)); re++))
       do
        repat_len=$(echo $(($(sed --regexp-extended 's/[[][actgu]+[]]/[/gi' <(echo "${repat[$re]}") | wc -m) - 1)))
        if [ "$repat_len" -lt "$repat_min" ] ||  ([ "$repat_max" -ne 0 ] && [ "$repat_len" -gt "$repat_max" ])
        then
         continue
        fi
        repat_tmp=${repat[$re]}
        reheads_tmp=${reheads[$re]}
        paste $reout <(awk -v repat="$repat_tmp" -v reheads="$reheads_tmp" -v resites_min="$resites_min" -v resites_max="$resites_max" \
        '{IGNORECASE = 1; seq=$0; renum=gsub(repat,"",seq);
        if($0 ~ repat && renum >= resites_min && (resites_max == 0 || renum <= resites_max))
        print reheads; else print ""}' $input |
        tr ";" "\t") > $enztmp
        SWITCH=$reout; reout=$enztmp; enztmp=$SWITCH
        if [ $verbose -eq 1 ]; then echo -en "\033[2K"$((100 * ($re + 1) / ${#repat[@]}))"% | "${reheads[$re]/;*}"\r" > $(readlink /proc/$$/fd/2); fi
       done
       if [ $verbose -eq 1 ]; then echo -en "\n\n" > $(readlink /proc/$$/fd/2); fi
       sed --regexp-extended 's/\t+/\t/g; s/^\t//g; s/\t$//g' $reout
       }
     
     # Random sequence function
     function random(){
     if [ $# -ge 1 -a -f "$1" ]
     then
      cat "$1"
     else
      cat -
     fi |
     if [[ $MOLECULE = "DNA" ]]
      then
       cut --fields=2 |
       awk -F $'\t' '{print system("tr --delete --complement ATGC < /dev/urandom | head --bytes="length($0))}' |
       tr --delete 0
      elif [[ $MOLECULE = "RNA" ]]
      then
       cut --fields=2 |
       awk -F $'\t' '{print system("tr --delete --complement AUCG < /dev/urandom | head --bytes="length($0))}' |
       tr --delete 0
      elif [[ $MOLECULE = "PROTEIN" ]]
      then
       cut --fields=2 |
       tr -d "*" |
       awk -F $'\t' '{print system("tr --delete --complement ARNCEQGHILKMFPSTWYV < /dev/urandom | head --bytes="length($0))}' |
       tr --delete 0
      else
       echo "Invalid molucule type!" > $(readlink /proc/$$/fd/2)
       exit 1
      fi
      }
      
      # Multi-line conversion function
      multiline(){
      paste $1 $2 |
     grep --perl-regexp --invert-match "\t$" |
     tr "\t" "\n" |
      if [ $(grep --count --perl-regexp --ignore-case "^>.+[ACTGU]{$multi}" $HEADERS) -eq 0 ]
      then
       sed --regexp-extended "s/\r//g; s/([ACTGUactgu]{$multi})/\1\n/g"
      else
       awk -F "" -v multi="$multi" '/>/{print $0}; !/>/{for(i=1; i<=NF; i+=multi) {print substr($0,i,multi);}}'
      fi
      }
      
      # Count non-nucleotide characters function
      fun_nonnuc(){
      paste <(cat $1 | tr --delete ">") <(cat $2 | tr --delete "ACTGUactgu" | awk '{print length($0)}') |
      grep --invert-match --perl-regexp "\t0"
     }
     
     # Sequence statistics function
     seq_stats(){
     lengths=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
     awk '{print length($0)}' $1 | sort -rn > $lengths
     total=$(awk '{OFS="\t"}; {sum+=$0}; END{printf "%.0f", sum}' $lengths)
     l50_idx=$(awk '{OFS="\t"}; {sum+=$0}; {printf "%s%s%.0f\n", NR,OFS,sum}' $lengths |
     awk -v total=$total -F $'\t' '{if($2 > (total*0.5))printf "%.0f\n", $1}' |
     head -1)
     l90_idx=$(awk '{OFS="\t"}; {sum+=$0}; {printf "%s%s%.0f\n", NR,OFS,sum}' $lengths |
     awk -v total=$total -F $'\t' '{if($2 > (total*0.9))printf "%.0f\n", $1}' |
     head -1)
     num_seq=$(cat $lengths | wc -l)
     half_num=$(awk -v num_seq=$num_seq 'NR==(int(num_seq/2)+1){printf $0}' $lengths)
     echo -e "Total length\t"$total > $(readlink /proc/$$/fd/2)
     echo -e "Sequence #\t"$num_seq > $(readlink /proc/$$/fd/2)
     echo -e "Longest sequence\t"$(head -1 $lengths) > $(readlink /proc/$$/fd/2)
     echo -e "Shortest sequence\t"$(tail -1 $lengths) > $(readlink /proc/$$/fd/2)
     echo -e "Median\t"$(awk -v num_seq=$num_seq -v half_num=$half_num \
     'NR==int(num_seq/2){if(num_seq/2 == int(num_seq/2)) printf "%.1f", ($0+half_num)/2; else printf "%.0f", $0}' $lengths) > $(readlink /proc/$$/fd/2)
     echo -e "Mean\t"$(bc <<< "scale=2; $total/$num_seq") > $(readlink /proc/$$/fd/2)
     echo -e "GC%\t"$(bc <<< "scale=2; $(cat $1 | tr --delete "[AaTtUu]\n" | wc -m)*100/$(cat $1 | tr --delete "\n" | wc -m)") \
     > $(readlink /proc/$$/fd/2)
     echo -e "L50\t"$(awk -v l50_idx=$l50_idx 'NR==l50_idx{printf "%.0f", $0}' $lengths) > $(readlink /proc/$$/fd/2)
     echo -e "N50\t"$l50_idx > $(readlink /proc/$$/fd/2)
     echo -e "L90\t"$(awk -v l90_idx=$l90_idx 'NR==l90_idx{printf "%.0f", $0}' $lengths) > $(readlink /proc/$$/fd/2)
     echo -e "N90\t"$l90_idx > $(readlink /proc/$$/fd/2)
     }
     
     # Complementary sequnce function
     fun_comp(){
     if test -n "$1"
      then
       cat $1
      else
       cat -
      fi |
     if [[ $MOLECULE = "DNA" ]]
      then
       parallel -k -j"$threads" --block 30M --pipe 'tr \"ATCGatcg\" \"TAGCtagc\"'
      elif [[ $MOLECULE = "RNA" ]]
      then
       parallel -k -j"$threads" --block 30M --pipe 'tr \"AUCGaucg\" \"UAGCuagc\"'
      else
       echo "Invalid molucule type!" > $(readlink /proc/$$/fd/2)
       exit 1
      fi
      }
      
      # Reverse sequnce function
      fun_rev(){
      if test -n "$1"
      then
       cat $1
      else
       cat -
      fi |
      parallel -a $1 -k -j"$threads" --block 30M --pipe 'rev'
      }
      
      # RNA-to-DNA conversion function
      fun_rna_dna(){
      if test -n "$1"
      then
       cat $1
      else
       cat -
      fi |
      parallel -k -j"$threads" --block 30M --pipe 'tr \"TtUu\" \"UuTt\"'
      }
      
      # ORF search
      orf_search(){
       local SWITCH
       local ORFstart=$1
       local ORFend=$2
       local orf_core=$3
       local headcore_orf=HEADCORE$orf_core
       local outcore_orf=OUTCORE$orf_core
       local ORFHEADERS=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
       local ORFFILE1=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
       
       if [[ $threads != 1 ]]
       then
        sed --quiet ''"$ORFstart"','"$ORFend"'p;'"$(($ORFend + 1))"'q' $4 > $ORFFILE1
        sed --quiet ''"$ORFstart"','"$ORFend"'p;'"$(($ORFend + 1))"'q' $5 > $ORFHEADERS
       else
        cp --force $4 $ORFFILE1
        cp --force $5 $ORFHEADERS
       fi
       
       if [ ! -z ${makebed+x} ]
       then
        local seq_length_orf=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
        if [[ $threads != 1 ]]
        then
         sed --quiet ''"$ORFstart"','"$ORFend"'p;'"$(($ORFend + 1))"'q' $6 > $seq_length_orf
        else
         cp --force $6 $seq_length_orf
        fi
        local idx=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
        local idx_start=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
        local idx_stop=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
       
       paste $ORFHEADERS \
       <(awk -F '' '{for(i=1; i<=NF; i+=3) {printf "%s%s ", $i,$(i+1)$(i+2);}; print ""}' $ORFFILE1) \
       <(cat $seq_length_orf) |
        awk -F $'\t' -v orf_core=$orf_core -v ORFend=$ORFend -v verbose=$verbose \
        '{OFS="\t"; IGNORECASE=1; len=split($2,arr," "); idx=1; orf=1; seek=0; delete start; delete stop; head=$1; gsub(">","",head);
        if($1 ~ /_frame/) {frame=substr($1,match($1,"_frame") + 6,1)} else {frame=1} ;
        if(FNR % 1000 && orf_core == 0 && verbose == 1){printf ("Getting ORFs: %d%\r", 100*FNR/ORFend) > "/dev/tty"};
        for(i=1;i<=len;i++) {
         if(arr[i] ~ /a[tu]g/ && seek == 0) {
          start[idx]=(i-1)*3; seek = 1 };
         if(arr[i] ~ /[tu][ag]a|[tu]ag/ && i >= 2 && seek == 1) {
          stop[idx]=(i-1)*3+4 ; seek = 0; print head"_orf"idx,frame,$3,start[idx],stop[idx]; idx++};
          };
          } END{if(orf_core == 0 && verbose == 1) print "\n" > "/dev/tty"}' > ${!outcore_orf}
       if [ $orf_core -eq 0 ] && [ $verbose -eq 1 ]; then echo "" > $(readlink /proc/$$/fd/2); fi
       else
        local ORFFILE2=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
        paste $ORFHEADERS <(awk -F '' '{for(i=1; i<=NF; i+=3) {printf "%s%s ", $i,$(i+1)$(i+2);}; print ""}' $ORFFILE1) |
        if [ ! -z ${upstream+x} ]
        then
         awk -F $'\t' -v max_orf_num="${max_orf_num:0}" -v upstream="$upstream" -v orf_core="$orf_core" -v ORFend=$ORFend -v verbose=$verbose \
         '{OFS="\t"; IGNORECASE=1; len=split($2,seq,"a[tu]g|[tu][ag]a|[tu]ag",sep); orf=1; x=1; last=0;
         if(FNR % 1000 && orf_core == 0 && verbose == 1){printf ("Getting ORFs: %d%\r", 100*FNR/ORFend) > "/dev/tty"};
         if(FNR == ORFend && orf_core == 0 && verbose == 1) print "" > "/dev/tty";
         for(i in sep) { if(sep[i] ~ /[tu][ag]a|[tu]ag/) last=i};
         for(i in seq) {
         if(i <= last && (max_orf_num == 0 || orf <= max_orf_num)){
         if(sep[i] ~ /a[tu]g/ && x == 1) {
         move=1; flank=sep[i-move] seq[i]; gsub(" ","",flank); len=length(flank);
         while(len < upstream && (i - move) >= 1){
         flank=sep[i-move] seq[i-move] flank;
         gsub(" ","",flank);
         move++;
         len=length(flank)
         };
         print $1"_orf"orf,substr(flank,length(flank) - upstream + 1);
         orf++; x=2}
         else{
         if(sep[i] ~ /[tu][ag]a|[tu]ag/ && sep[i-1] ~ /a[tu]g/ && i >= 2) {x=1}
         }
         }}}'
        elif [ ! -z ${downstream+x} ]
        then
         awk -F $'\t' -v max_orf_num="${max_orf_num:0}" -v downstream="$downstream" -v orf_core="$orf_core" -v ORFend=$ORFend -v verbose=$verbose \
         '{OFS="\t"; IGNORECASE=1; len=split($2,seq,"a[tu]g|[tu][ag]a|[tu]ag",sep); orf=1; x=1; last=0;
         if(FNR % 1000 && orf_core == 0 && verbose == 1){printf ("Getting ORFs: %d%\r", 100*FNR/ORFend) > "/dev/tty"};
         if(FNR == ORFend && orf_core == 0 && verbose == 1) print "" > "/dev/tty";
         for(i in sep) { if(sep[i] ~ /[tu][ag]a|[tu]ag/) last=i};
         for(i in seq) {
         if(i <= last && (max_orf_num == 0 || orf <= max_orf_num)){
         if(sep[i] ~ /a[tu]g/ && x == 1) {
         x=2};
         if(sep[i] ~ /[tu][ag]a|[tu]ag/ && x == 2) {
         move=1; flank=seq[i+move] sep[i+move]; gsub(" ","",flank); len=length(flank);
         while(len < downstream && (i + move) <= len){
         move++;
         flank=flank seq[i+move] sep[i+move];
         gsub(" ","",flank);
         len=length(flank)
         };
         print $1"_orf"orf,substr(flank,1,downstream);
         orf++; x=1}
         else{
         if(sep[i] ~ /[tu][ag]a|[tu]ag/ && sep[i-1] ~ /a[tu]g/ && i >= 2) {x=1}
         }
         }}}'
        else
         awk -F $'\t' -v max_orf_num="${max_orf_num:0}" -v orf_core="$orf_core" -v ORFend=$ORFend -v verbose=$verbose \
         '{OFS="\t"; IGNORECASE=1; len=split($2,seq,"a[tu]g|[tu][ag]a|[tu]ag",sep); orf=1; x=1; last=0;
         if(FNR % 1000 && orf_core == 0 && verbose == 1){printf ("Getting ORFs: %d%\r", 100*FNR/ORFend) > "/dev/tty"};
         if(FNR == ORFend && orf_core == 0 && verbose == 1) print "" > "/dev/tty";
         for(i in sep) { if(sep[i] ~ /[tu][ag]a|[tu]ag/) last=i};
         for(i in seq) {
         if(i <= last && (max_orf_num == 0 || orf <= max_orf_num)){
         if(sep[i] ~ /a[tu]g/ && x == 1) {print $1"_orf"orf,sep[i]seq[i+1]; orf++; x=2}
         else{
         if(sep[i] ~ /a[tu]g/) {print "",sep[i]seq[i+1]};
         if(sep[i] ~ /[tu][ag]a|[tu]ag/ && sep[i-1] ~ /a[tu]g/ && i >= 2) {print "",sep[i]; x=1};
         }}}}'
        fi |
        tee $ORFFILE2 |
        cut --fields=1 |
        grep --perl-regexp --invert-match "^$" > ${!headcore_orf}
        sed --regexp-extended 's/(>.+?)\t/\1\n/g; s/\t//g' $ORFFILE2 |
        perl -pe '$. > 1 and /^>/ ? print "\n" : chomp' |
        grep --perl-regexp --invert-match "^>" |
        if [ ! -z ${translate+x} ]
        then
         translate - |
         tr --delete " [:lower:]"
        else
         tr --delete " "
        fi |
        if [ ! -z ${seq_range+x} ]
        then
         awk -v min_seq_length="${seq_range[0]}" -v max_seq_length="${seq_range[1]}" \
         '{seq=$0; gsub("*","",seq);
         if(length(seq) >= min_seq_length && (length(seq) <= max_seq_length || max_seq_length == 0)) print $0;
         else print ""}'
        else
         cat
        fi > ${!outcore_orf}
       fi
      }
      
  # upstream and downstream exceptions
  if [ ! -z ${upstream+x} ] || [ ! -z ${downstream+x} ]
  then
   orf=1
   unset translate
   if [ ! -z ${upstream+x} ] && [ ! -z ${downstream+x} ]
   then
    unset downstream
   fi
  fi
  
  # Frame exception
  for frame_test in ${frame[@]}
  do
   if [ $frame_test -lt 0 ] || [ $frame_test -gt 6 ]
  then
   echo "Frame value must be 0-6 (comma delimited)"
   print_usage
   exit 1
  fi
  done
  
  # max_seq exception
  if [ ! -z ${max_seq+x} ] && [ ! $max_seq -gt 0 ] 
  then
   echo "Error: max_seq must be greater than 0" > $(readlink /proc/$$/fd/2)
   exit 1
  fi

  # Set six-frame array variable
  if [ $frame -eq 0 ]
   then
    frame=(1 2 3 4 5 6)
   fi

  # Disable rev-comp for reverse frames
  if [[ "${frame[@]}" =~ 4 ]] || [[ "${frame[@]}" =~ 5 ]] || [[ "${frame[@]}" =~ 6 ]]
   then
    unset $complement
    unset $rev_seq
   fi

  # Disable translate
  if [ ! -z ${percent_GC+x} ]
  then
   unset translate
  fi
  
  if [ ! -z ${makebed+x} ]
  then
   unset translate
   translate_table=1
  fi
  
    # Get input files    
    if [ $# -ge 1 -a -f "$1" ]
    then
     FILE="$1"
    else
     stdin=1
     FILE=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
     cat - > $FILE
    fi
    
    # Detect molecule and exit
    if [ ! -z ${detect+x} ]
    then
     detect_mol <(grep --perl-regexp --invert-match "^>" $FILE)
     exit 0
    fi

    HEADERS=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
    INFILE=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
    OUTFILE=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
    
    if [ $verbose -eq 1 ]; then echo -en "Using "$threads" thread(s)\n\n" > $(readlink /proc/$$/fd/2); fi

    parallel -a $FILE -k -j"$threads" --block 30M --pipepart 'grep --perl-regexp "^>"' |
    sed --regexp-extended 's/\r//g' > $HEADERS
    
if [[ $(grep --count --perl-regexp "^>" $FILE) != $(grep --count --perl-regexp --invert-match "^>" $FILE) ]]
    then
     if [ $verbose -eq 1 ]; then echo "FASTA file is NOT single line" > $(readlink /proc/$$/fd/2); fi
     if [ ! -z ${check_sl+x} ]; then exit 1; fi


    if [[ $lettercase = 0 ]]
    then
     if [ $verbose -eq 1 ]; then echo "Converting to single line FASTA" > $(readlink /proc/$$/fd/2); fi
     sed --regexp-extended 's/\r//g' $FILE |
     perl -pe '$. > 1 and /^>/ ? print "\n" : chomp' |
     grep --perl-regexp --invert-match "^>" > $OUTFILE
     
    # Convert to upper-case
    elif [[ $lettercase = 1 ]]
     then
      if [ $verbose -eq 1 ]; then echo "Converting to upper-case single line FASTA" > $(readlink /proc/$$/fd/2); fi
      sed --regexp-extended 's/\r//g' $FILE |
      perl -pe '$. > 1 and /^>/ ? print "\n" : chomp' |
      grep --perl-regexp --invert-match "^>" |
      tr "[:lower:]" "[:upper:]" > $OUTFILE
      
    # Convert to lower-case
     elif [[ $lettercase = 2 ]]
      then
       if [ $verbose -eq 1 ]; then echo "Converting to lower-case single line FASTA" > $(readlink /proc/$$/fd/2); fi
       sed --regexp-extended 's/\r//g' $FILE |
       perl -pe '$. > 1 and /^>/ ? print "\n" : chomp' |
       grep --perl-regexp --invert-match "^>" |
       tr "[:upper:]" "[:lower:]" > $OUTFILE
      
     fi
     if [ $verbose -eq 1 ]
     then
      echo -n "Single line conversion done: " > $(readlink /proc/$$/fd/2)
      show_time
     fi
     
    # Skip single line conversion
    else
    
    # Just load single-line sequences
    
     if [ $verbose -eq 1 ]; then echo "FASTA file is single line" > $(readlink /proc/$$/fd/2); fi
     if [ ! -z ${check_sl+x} ]; then exit 0; fi
     if [ $verbose -eq 1 ]; then echo "Skipping single line FASTA conversion" > $(readlink /proc/$$/fd/2); fi
    if [[ $lettercase = 0 ]]
    then
     parallel -a $FILE -k -j"$threads" --block 30M --pipepart 'grep --perl-regexp --invert-match "^>"'  > $OUTFILE
    elif [[ $lettercase = 1 ]]
    then
     if [ $verbose -eq 1 ]; then echo "Converting to upper-case FASTA" > $(readlink /proc/$$/fd/2); fi
     parallel -a $FILE -k -j"$threads" --block 30M --pipepart 'grep --perl-regexp --invert-match "^>"' |
     tr "[:lower:]" "[:upper:]" > $OUTFILE
    elif [[ $lettercase = 2 ]]
    then
     if [ $verbose -eq 1 ]; then echo "Converting to lower-case FASTA" > $(readlink /proc/$$/fd/2); fi
     parallel -a $FILE -k -j"$threads" --block 30M --pipepart 'grep --perl-regexp --invert-match "^>"' |
     tr "[:upper:]" "[:lower:]" > $OUTFILE
    fi
    if [ $verbose -eq 1 ]
     then
      echo -n "Loading sequence done: " > $(readlink /proc/$$/fd/2)
      show_time
     fi
    fi
    
    detect_mol $OUTFILE
        
    # Convert to Multi-line FASTA
    if [ ! -z ${multi+x} ]
    then
     if [ $verbose -eq 1 ]; then echo "Converting to multi line FASTA" > $(readlink /proc/$$/fd/2); fi
     SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
     multiline $HEADERS $INFILE > $OUTFILE
      # Output to file or stdout
    if [ ! -z ${out+x} ]
    then
     if [ $verbose -eq 1 ]
     then
      echo $(basename $1)" ---> "$output_file > $(readlink /proc/$$/fd/2)
     fi
     cp --force $OUTFILE $output_file
    else
     if [ ! -z ${inplace+x} ]
     then
      cp --force $OUTFILE $FILE
     else
      cat $OUTFILE
     fi
    
    if [ $verbose -eq 1 ]
    then
     echo -ne "\nMulti line conversion done: " > $(readlink /proc/$$/fd/2)
     show_time
    fi
    exit 0
    fi
    fi
    
    if [ ! -z ${nonnuc+x} ]
    then
     SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
     fun_nonnuc $HEADERS $INFILE
     if [ $verbose -eq 1 ]
      then
       echo -n "Non-ACTGU done: " > $(readlink /proc/$$/fd/2)
       show_time
      fi
     exit 0
    fi
    
    if [ ! -z ${stats+x} ]
    then
     seq_stats $OUTFILE
     if [ $verbose -eq 1 ]
      then
       echo -n "Sequence statistics done: " > $(readlink /proc/$$/fd/2)
       show_time
      fi
     exit 0
    fi
    
     # Get complementary sequences
     if [ ! -z ${complement+x} ]
     then
      if [ $verbose -eq 1 ]
      then
       echo "Converting to complement sequence" > $(readlink /proc/$$/fd/2)
      fi
      SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
      fun_comp $INFILE > $OUTFILE
      if [ $verbose -eq 1 ]
      then
       echo -n "Complement conversion done: " > $(readlink /proc/$$/fd/2)
       show_time
      fi
     fi
     
     # DNA-to-RNA or RNA-to-DNA
     if [ ! -z ${rna_dna+x} ]
     then
      SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
      if [[ $MOLECULE = "DNA" ]]
      then
       if [ $verbose -eq 1 ]; then echo "Converting DNA to RNA sequence" > $(readlink /proc/$$/fd/2); fi
       MOLECULE="RNA"
      elif [[ $MOLECULE = "RNA" ]]
      then
       if [ $verbose -eq 1 ]; then echo "Converting RNA to DNA sequence" > $(readlink /proc/$$/fd/2); fi
       MOLECULE="DNA"
      else
       echo "Invalid molucule type!" > $(readlink /proc/$$/fd/2)
       exit 1
      fi
      fun_rna_dna $INFILE > $OUTFILE
      if [ $verbose -eq 1 ]
       then
        echo -n "DNA/RNA conversion done: " > $(readlink /proc/$$/fd/2)
        show_time
       fi
     fi

     # Get reverse sequences
     if [ ! -z ${rev_seq+x} ]
     then
      if [ $verbose -eq 1 ]; then echo "Converting to reverse sequence" > $(readlink /proc/$$/fd/2); fi
      SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
      fun_rev $INFILE > $OUTFILE
      if [ $verbose -eq 1 ]
      then
       echo -n "Reverse conversion done: " > $(readlink /proc/$$/fd/2)
       show_time
      fi
     fi
     
     # Change frame
     if [ "${#frame[@]}" -ne 1 ] || [ ${frame[0]} -ne 1 ]
     then
     SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
     ADD_frame=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
     ADD_headers=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
     if [[ "${frame[@]}" =~ 1 ]]
     then
      cat $INFILE >> $ADD_frame
      awk -F $'\t' '{print $0"_frame1"}' $HEADERS >> $ADD_headers
     fi
     if [[ "${frame[@]}" =~ 2 ]]
     then
      sed --regexp-extended 's/^.//g' $INFILE >> $ADD_frame
      awk -F $'\t' '{print $0"_frame2"}' $HEADERS >> $ADD_headers
     fi
     if [[ "${frame[@]}" =~ 3 ]]
     then
      sed --regexp-extended 's/^..//g' $INFILE >> $ADD_frame
      awk -F $'\t' '{print $0"_frame3"}' $HEADERS >> $ADD_headers
     fi
     if [[ "${frame[@]}" =~ 4 ]] || [[ "${frame[@]}" =~ 5 ]] || [[ "${frame[@]}" =~ 6 ]]
     then
      INFILE_revcomp=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
      fun_rev $INFILE |
      fun_comp > $INFILE_revcomp
      if [[ "${frame[@]}" =~ 4 ]]
      then
       cat $INFILE_revcomp >> $ADD_frame
       awk -F $'\t' '{print $0"_frame4"}' $HEADERS >> $ADD_headers
      fi
      if [[ "${frame[@]}" =~ 5 ]]
      then
       sed --regexp-extended 's/^.//g' $INFILE_revcomp >> $ADD_frame
       awk -F $'\t' '{print $0"_frame5"}' $HEADERS >> $ADD_headers
      fi
      if [[ "${frame[@]}" =~ 6 ]]
      then
       sed --regexp-extended 's/^..//g' $INFILE_revcomp >> $ADD_frame
       awk -F $'\t' '{print $0"_frame6"}' $HEADERS >> $ADD_headers
      fi
     fi
     HEADERS=$ADD_headers
     OUTFILE=$ADD_frame
     fi
     
     # Verbose sequence cutoffs
     if [ $verbose -eq 1 ] && [ ! -z $seq_range ]; then echo "Extracting "${seq_range[0]}" < sequence(s) < "${seq_range[1]} > $(readlink /proc/$$/fd/2); fi
     if [ $verbose -eq 1 ] && [ ! -z $max_seq ]; then echo "Extracting "$max_seq" longest sequence(s) for each input sequence" > $(readlink /proc/$$/fd/2); fi

     # ORF finding
     if [ ! -z ${orf+x} ]
     then
     if [ $verbose -eq 1 ]; then echo "ORF | frame(s) "${frame[@]} > $(readlink /proc/$$/fd/2); fi
     if [ ! -z ${translate+x} ] && [ $verbose -eq 1 ]; then echo "Translate | frame(s) "${frame[@]} > $(readlink /proc/$$/fd/2); fi
     if [ $translate_table -ne 1 ] && [ $verbose -eq 1 ]; then echo "Translation code: "$translate_table > $(readlink /proc/$$/fd/2); fi
     if [ ! -z ${makebed+x} ] && [ $verbose -eq 1 ]; then echo "Output in BED format" > $(readlink /proc/$$/fd/2); fi
     
     SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
     
     # Allocate sequences to requested threads
     seq_num=$(grep --perl-regexp --count "^>" $HEADERS)
     if [[ $seq_num -lt $threads ]]
     then
      threads=$seq_num
     fi
     
     # Setup start and end lines for dividing sequences
     BATCH=$(( seq_num / $threads ))
     remainder=$(( seq_num % $threads ))
     
     start=1
     end=()
     for ((core=0;core <= $(($threads - 1));core++))
     do
      if [[ ${#end[@]} != 0 ]]
      then
       start=(${start[@]} $((${end[$(($core - 1))]} + 1)))
      fi
      if [[ $core -lt $remainder ]]
      then
       end=(${end[@]} $((${start[$core]} + $BATCH)))
      else
       end=(${end[@]} $((${start[$core]} + $BATCH - 1)))
      fi
     done
     
     # Loop for function getting ORFs for multithreading
     HEADERS_TMP=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
     : > $OUTFILE
     : > $HEADERS_TMP

      for ((core=0;core <= $(($threads - 1));core++))
      do
       declare OUTCORE$core=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
       declare HEADCORE$core=$(mktemp --tmpdir=/tmp fastakit$script_pid.XXXXXXXXXX)
       if [ ! -z ${makebed+x} ]
       then
        orf_search ${start[$core]} ${end[$core]} $core $INFILE $HEADERS <(awk -F $'\t' '{print length($0)}' $INFILE) &
        pids[$core]=$!
       else
        orf_search ${start[$core]} ${end[$core]} $core $INFILE $HEADERS &
        pids[$core]=$!
       fi
      done
      
      for pid in ${pids[*]}
      do
       wait $pid
      done
      
      for ((core=0;core <= $(($threads - 1));core++))
      do
      if [ ! -z ${makebed+z} ]
      then
       outcore_tmp=OUTCORE$core
       cat ${!outcore_tmp} >> $OUTFILE
      else
       headcore_tmp=HEADCORE$core
       outcore_tmp=OUTCORE$core
       cat ${!headcore_tmp} >> $HEADERS_TMP
       cat ${!outcore_tmp} >> $OUTFILE
      fi
      done

     HEADERS=$HEADERS_TMP
     
     if [ ! -z ${makebed+x} ]
     then
     SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
     if [ -z ${seq_range+x} ]
     then
      awk -F $'\t' '{OFS="\t"};
      {headers=$1}; {gsub(/_orf[0-9]+/,"",$1)}; {gsub(/_frame[0-9]+/,"",$1)};
      $2 ~ 1{print $1,$4,$5,$5-$4,headers,0,"+",$4,$5,"0,128,255"}
      $2 ~ 2{print $1,$4+1,$5+1,$5-$4,headers,0,"+",$4+1,$5+1,"0,164,255"}
      $2 ~ 3{print $1,$4+2,$5+2,$5-$4,headers,0,"+",$4+2,$5+2,"0,200,255"}
      $2 ~ 4{print $1,$3-$5,$3-$4,$5-$4,headers,0,"-",$3-$5,$3-$4,"255,128,0"}
      $2 ~ 5{print $1,$3-$5+1,$3-$4+1,$5-$4,headers,0,"-",$3-$5+1,$3-$4+1,"255,164,0"}
      $2 ~ 6{print $1,$3-$5+2,$3-$4+2,$5-$4,headers,0,"-",$3-$5+2,$3-$4+2,"255,200,0"}' $INFILE
     else
      awk -F $'\t' -v min_seq_length="${seq_range[0]}" -v max_seq_length="${seq_range[1]}" '{OFS="\t"};
      {headers=$1}; {gsub(/_orf[0-9]+/,"",$1)}; {gsub(/_frame[0-9]+/,"",$1)};
      $2 ~ 1{if( $5-$4 >= min_seq_length && ($5-$4 <= max_seq_length || max_seq_length == 0)){
      print $1,$4,$5,$5-$4,headers,0,"+",$4,$5,"0,128,255"}}
      $2 ~ 2{if( $5-$4 >= min_seq_length && ($5-$4 <= max_seq_length || max_seq_length == 0)){
      print $1,$4+1,$5+1,$5-$4,headers,0,"+",$4+1,$5+1,"0,164,255"}}
      $2 ~ 3{if( $5-$4 >= min_seq_length && ($5-$4 <= max_seq_length || max_seq_length == 0)){
      print $1,$4+2,$5+2,$5-$4,headers,0,"+",$4+2,$5+2,"0,200,255"}}
      $2 ~ 4{if( $5-$4 >= min_seq_length && ($5-$4 <= max_seq_length || max_seq_length == 0))
      {print $1,$3-$5,$3-$4,$5-$4,headers,0,"-",$3-$5,$3-$4,"255,128,0"}}
      $2 ~ 5{if( $5-$4 >= min_seq_length && ($5-$4 <= max_seq_length || max_seq_length == 0)){
      print $1,$3-$5+1,$3-$4+1,$5-$4,headers,0,"-",$3-$5+1,$3-$4+1,"255,164,0"}}
      $2 ~ 6{if( $5-$4 >= min_seq_length && ($5-$4 <= max_seq_length || max_seq_length == 0)){
      print $1,$3-$5+2,$3-$4+2,$5-$4,headers,0,"-",$3-$5+2,$3-$4+2,"255,200,0"}}' $INFILE
     fi |
     if [ ! -z $max_seq ]
     then
      sort --parallel="$threads" --field-separator=$'\t' --key=1,1 --key=4,4nr |
      cut --fields=1-3,5-10 |
      awk -F $'\t' -v max_seq="$max_seq" 'NR==1{i=1; head=$1}; {if($1 == head) {if(i <= max_seq){print $0; i++; head=$1} else next} else {print $0; i=2; head=$1}}' |
      sort --parallel="$threads" --field-separator=$'\t' --key=1,1 --key=2,2n
     else
      cut --fields=1-3,5-10 |
      sort --parallel="$threads" --field-separator=$'\t' --key=1,1 --key=2,2n
     fi |
     cat <(echo -e "# Created with fastakit version "$version"\n") -
     if [ $verbose -eq 1 ]
     then
      echo -ne "\nBED file creation done: " > $(readlink /proc/$$/fd/2)
      show_time
     fi
     exit 0
     fi

     if [ $verbose -eq 1 ] && [ -z ${translate+x} ]
     then
      echo -n "ORF detection done: " > $(readlink /proc/$$/fd/2)
      show_time
     fi
     if [ $verbose -eq 1 ] && [ ! -z ${translate+x} ]
     then
      echo -n "ORF detection and translation done: " > $(readlink /proc/$$/fd/2)
      show_time
     fi
    fi
    
    # Minimum/Maximum length (nucleotie)
     if [ ! -z ${seq_range+x} ] && [ -z ${orf+x} ]
     then
     SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
      awk -v min_seq_length="${seq_range[0]}" -v max_seq_length="${seq_range[1]}" \
      '{seq=$0; gsub("*","",seq); if(length(seq) >= min_seq_length && (length(seq) <= max_seq_length || max_seq_length == 0)) print $0;
      else print ""}' $INFILE > $OUTFILE
     fi
     
    # Separate to codons and translate
    if [ ! -z ${translate+x} ] && [ -z ${orf+x} ]
    then
     SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
     if [ $verbose -eq 1 ]
     then
      echo "Translate | frame(s) "${frame[@]} > $(readlink /proc/$$/fd/2)
     fi
     if [ $verbose -eq 1 ] && [ $translate_table -ne 1 ]
     then
      echo "Translation code: "$translate_table > $(readlink /proc/$$/fd/2)
     fi
     awk -F '' '{for(i=1; i<=NF; i+=3) {printf "%s%s ", $i,$(i+1)$(i+2);}; print ""}' $INFILE |
      translate - |
       tr --delete " [:lower:]" > $OUTFILE
       if [ $verbose -eq 1 ]
       then
        echo -n "Translation done: " > $(readlink /proc/$$/fd/2)
        show_time
       fi
    fi
    
    # Randomize sequences
    if [ ! -z ${random+x} ]
     then
      SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
      detect_mol $INFILE
      random $INFILE > $OUTFILE
      if [ $verbose -eq 1 ]
      then
       echo -n "Random sequence done: " > $(readlink /proc/$$/fd/2)
       show_time
      fi
     fi
    
     # Combine headers and sequences
     SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
     paste $HEADERS $INFILE |
     grep --perl-regexp --invert-match "\t$" > $OUTFILE
     
     # Get max_seq number of largest sequences from each input sequence
     if [ ! -z ${max_seq+x} ]
     then
      SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
      awk -F $'\t' \
      '{OFS="\t"}; {headers=$1}; {seq=$2}; {gsub(/_orf[0-9]+/,"",$1)}; {gsub(/_frame[0-9]+/,"",$1)}; {gsub("*","",$2)};
      {print length($2),$1,headers,seq}' $INFILE |
      sort --parallel="$threads" --field-separator=$'\t' --key=2,2 --key=1,1nr |
      awk -F $'\t' -v max_seq="$max_seq" \
      'NR==1{i=1; head=$2}; {if($2 == head) {if(i <= max_seq){print $0; i++; head=$2} else next} else {print $0; i=2; head=$2}}' |
      cut --fields=3,4 > $OUTFILE
     fi
     
     if [ ! -z ${unique+x} ]
     then
      SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
      sort --ignore-case --parallel="$threads" --field-separator=$'\t' --unique --key=2,2 $INFILE > $OUTFILE
      if [ $verbose -eq 1 ]
      then
       echo -n "Remove duplicates done: " > $(readlink /proc/$$/fd/2)
       show_time
      fi
     fi
     
     # Sort by name
     if [ ! -z ${name_sort+x} ]
     then
     if [ $verbose -eq 1 ]
     then
      echo "Sort by name" > $(readlink /proc/$$/fd/2)
     fi
      SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
      if [ ! -z ${reverse_sort+x} ]
      then
      if [ $verbose -eq 1 ]
      then
       echo "Sort in reverse order" > $(readlink /proc/$$/fd/2)
      fi
       sort --parallel="$threads" --reverse --field-separator=$'\t' --key=1 $INFILE > $OUTFILE
      else
       sort --parallel="$threads" --field-separator=$'\t' --key=1 $INFILE > $OUTFILE
      fi
      if [ $verbose -eq 1 ]
      then
       echo -n "Name sort done: " > $(readlink /proc/$$/fd/2)
       show_time
      fi
     fi
    
    # Sort by sequence length
     if [ ! -z ${length_sort+x} ]
     then
      if [ $verbose -eq 1 ]
      then
       echo "Sort by length" > $(readlink /proc/$$/fd/2)
      fi
      SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH    
      awk -F '\t' '{OFS="\t"; print length($2),$0}' $INFILE |
      if [ ! -z ${reverse_sort+x} ]
      then
      if [ $verbose -eq 1 ]
      then
       echo "Sort in reverse order" > $(readlink /proc/$$/fd/2)
      fi
       sort --parallel="$threads" --field-separator=$'\t' --numeric-sort --reverse
      else
       sort --parallel="$threads" --field-separator=$'\t' --numeric-sort
      fi |
      cut --fields=2,3 > $OUTFILE
      if [ $verbose -eq 1 ]
      then
       echo -n "Length sort done: " > $(readlink /proc/$$/fd/2)
       show_time
      fi
     fi
     
     # GC content
     if [ ! -z ${percent_GC+x} ]
     then
     if [ $verbose -eq 1 ]
     then
      echo "Percent GC" > $(readlink /proc/$$/fd/2)
     fi
     SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
      paste <(cut --fields=1 $INFILE | tr --delete ">") <(cut --fields=2 $INFILE | awk '{var=length($0);gsub("[AaTt]","",$0);print length($0)/var*100}')
      if [ $verbose -eq 1 ]
      then
       echo -n "GC fraction done: " > $(readlink /proc/$$/fd/2)
       show_time
      fi
      exit 0
     fi
     
     # Calculate molucular weight
    if [ ! -z ${MW+x} ]
    then
    if [ $verbose -eq 1 ]; then echo "Calculating molecular weight" > $(readlink /proc/$$/fd/2); fi
     SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
     if [[ $MOLECULE == "DNA" ]] || [[ $MOLECULE = "RNA" ]]
     then
      paste <(cut --fields=1 $INFILE | tr --delete ">") <(cut --fields=2 $INFILE | calc_MW 1 -) <(cut --fields=2 $INFILE | calc_MW 2 -)
     elif [[ $MOLECULE == "PROTEIN" ]]
     then
      paste <(cut --fields=1 $INFILE | tr --delete ">") <(cut --fields=2 $INFILE | calc_MW 1)
     else
      echo "Error detecting molecule" > $(readlink /proc/$$/fd/2)
      exit 1
     fi
     if [ $verbose -eq 1 ]
      then
       echo -n "Molecular weight done: " > $(readlink /proc/$$/fd/2)
       show_time
      fi
      exit 0
    fi
    
     # Detect restriction sites
     if [ ! -z ${renz+x} ] && [[ $MOLECULE != "PROTEIN" ]]
     then
     if [ $verbose -eq 1 ]; then echo "Detecting restriction sites" > $(readlink /proc/$$/fd/2); fi
      SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
      if [[ "${min_max_re[0]=0}" =~ "list" ]]
       then
        res_enz $INFILE ${min_max_re[0]=0} ${min_max_re[1]=0} ${min_max_re[2]=0} ${min_max_re[3]=0} ${min_max_re[4]=0}
        exit 0
      else
      paste <(cut --fields=1 $INFILE | tr --delete ">") \
      <(res_enz $INFILE ${min_max_re[0]=0} ${min_max_re[1]=0} ${min_max_re[2]=0} ${min_max_re[3]=0} ${min_max_re[4]=0}) |
      grep --perl-regexp --invert-match "\t$"
      fi
      if [ $verbose -eq 1 ]
      then
       echo -n "Restriction site detection done: " > $(readlink /proc/$$/fd/2)
       show_time
      fi
      exit 0
     fi
     
     # Separate sequences into files
     if [ ! -z ${separate+x} ]
     then
     echo "Separating sequences into files" > $(readlink /proc/$$/fd/2)
      if [ ! -d $separate ]
      then
       mkdir -p $separate
      fi
      for ((k=1;k<=$(cat $OUTFILE | wc -l);k++))
      do
       cut --fields=1 $OUTFILE | sed --quiet ''"$k"','"$k"'p;'"$(($k + 1))"'q' > $separate/$k.fasta
       cut --fields=2 $OUTFILE | sed --quiet ''"$k"','"$k"'p;'"$(($k + 1))"'q' >> $separate/$k.fasta
      done
      if [ $verbose -eq 1 ]
      then
       echo -en "\nSequence separation done: " > $(readlink /proc/$$/fd/2)
       show_time
      fi
      exit 0
     fi
     
     # Convert tabbed to FASTA
     SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
     cat $INFILE |
     tr "\t" "\n" > $OUTFILE
     
    # Output to file or stdout
    if [ ! -z ${out+x} ]
    then
     if [ $verbose -eq 1 ]
     then
      echo $(basename $1)" ---> "$output_file > $(readlink /proc/$$/fd/2)
     fi
     cp --force $OUTFILE $output_file
    else
     if [ ! -z ${inplace+x} ]
     then
      cp --force $OUTFILE $FILE
     else
      cat $OUTFILE
     fi
    fi
    
    if [ $verbose -eq 1 ]
    then
     echo -ne "\nfastakit done: " > $(readlink /proc/$$/fd/2)
     show_time
    fi
