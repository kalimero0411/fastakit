#!/usr/bin/env bash
#set -x
# Default parameters
threads=$(command -v nproc --all &> /dev/null && nproc || echo 1)
lettercase=0
frame=1
translate_table=1
time_start=$(date +%s)

function print_usage(){
 printf "
fastakit [OPTIONS] [Sequence.fasta | standard input]
	-o | --out	Output to file (otherwise to stdout)
	-i | --in-place	Modify file in-place
	-c | --complement	Complementary sequence
	-m | --reverse_seq	Reverse sequence
	--unique	Remove duplicate sequences
	--multi #	Convert to multi-line FASTA (nucleotide only)
	--random	Create random sequences of respective length
	--name_sort	Sort FASTA by name
	--length_sort	Sort FASTA by sequence length (shortest to longest)
	--reverse_sort	Sort in reverse order
	--upper	Sequences to uppercase
	--lower	Sequences to lowercase
	--orf	Sequence from first ATG in frame
	--max_orf_num #	Maximum number of ORFs to output per sequence
	--translate	Protein sequences in current frame
	--table #	Translation code (Default = standard code)
	--frame #	Frame to extract codons (Frames 1, 2 or 3; 0 = six frames; Default = 1)
	--min_prot #	Minimum protein size (Assumes --translate)
	--gc	Get percent GC per sequence (Disables --translate)
	--separate DIR	Separate sequnces into files in directory DIR
	--nonnuc	Non-ACTGU characters (0 ignored)
	--rna_dna	Convert RNA to DNA / DNA to RNA (Default = no conversion)
	--min_max_seq #,#	Minimum/Maximum sequence size (e.g. 10,50 ; 0 to ignore)
	--check	Check if FASTA file is single line
	-t | --threads #	Number of CPU threads to use (Default = Detected processors or 1)
	-v | --verbose	Verbose
	-h | --help	Display help
	--stats	Calculate basic stats
	--version	Print version date


	Available translation codes:
	1 - Standard code
	2 - Vertebrate Mitochondrial code
	3 - Yeast mitochondrial code
	4 - Mold, protozoan, and coelenterate mitochondrial code and the mycoplasma/spiroplasma code
	
"
}

# Check arguments
while [ "$#" -gt 0 ]
do
arg=$1
 case $arg in
  -o | --out)
  out=1 # Output to file
  output_file=$2
  shift 2
  ;;
  -i | --in-place)
  inplace=1 # Modify file in-place
  shift
  ;;
  --unique)
  unique=1 # Remove duplicate sequences
  shift
  ;;
  --name_sort)
  name_sort=1 # Sort FASTA file by name
  shift
  ;;
  --random)
  random=1 # Sort FASTA file by name
  shift
  ;;
  --length_sort)
  length_sort=1 # Sort FASTA file by sequence length
  shift
  ;;
  --reverse_sort)
  reverse_sort=1 # Sort in reverse order
  shift
  ;;
  --upper)
  lettercase=1 # Sequences to uppercase
  shift
  ;;
  --lower)
  lettercase=2 # Sequences to lowercase
  shift
  ;;
  -c | --complement)
  complement=1 # Complementary sequences
  shift
  ;;
  -m | --reverse_seq)
  rev_seq=1 # Reverse sequences
  shift
  ;;
  --frame) # Set frame for codons
  frame=$2
  shift 2
  ;;
  --orf)
  orf=1 # Sequence from first ATG in frame
  shift
  ;;
  --max_orf_num)
  max_orf_num=$2 # Maximum number of ORFs per sequence
  shift 2
  ;;
  --translate)
  translate=1 # Translate sequences
  shift
  ;;
  --gc)
  percent_GC=1 # Get percent GC per sequence
  shift
  ;;
  --rna_dna)
  rna_dna=1 # Convert RNA to DNA / DNA to RNA
  shift
  ;;
  --nonnuc)
  nonnuc=1 # Count non-ACTGU characters
  shift
  ;;
  --separate)
  separate=$2 # Separate sequnces into files
  shift 2
  ;;
  --table)
  translate_table=$2 # Alternative translation table
  shift 2
  ;;
  --version)
  echo "fastakit version 22.04" >> $(readlink /proc/$$/fd/2)
  exit 0
  ;;
  --check)
  check_sl=1
  shift
  ;;
  --min_prot)
  min_prot=1 # Minimum protein size
  translate=1 # Translate sequences
  min_prot_length=$2
  shift 2
  ;;
  --min_max_seq)
  IFS="," min_max_seq_length=($(echo "$2")) # Minimum/Maximum nucleotide sequence size
  shift 2
  ;;
  -t | --threads)
  threads=$2 # Number of CPU threads
  shift 2
  ;;
  --stats)
  stats=1 # Calculate basic stats
  shift
  ;;
  --multi)
  multi=1 # Covert to multiline FASTA
  multi_length=$2
  shift 2
  ;;
  -v | --verbose)
  verbose=1 # Print file names and arguments
  shift
  ;;
  -h | --help)
  print_usage
  exit 1
  ;;
  *)
  if [ -f "$1" ]
  then
   break
  else
  echo "Unknown option: "$1
  print_usage
  exit 1
  fi
  ;;
  esac
  done
  
  # Check dependencies
  if ! command -v gawk &> /dev/null
  then
   echo "gawk not installed" >> $(readlink /proc/$$/fd/2)
   echo "Install using:" >> $(readlink /proc/$$/fd/2)
   echo "sudo apt install gawk" >> $(readlink /proc/$$/fd/2)
  exit 1
  fi
  
  if ! command -v perl &> /dev/null
  then
   echo "perl not installed" >> $(readlink /proc/$$/fd/2)
   echo "Install using:" >> $(readlink /proc/$$/fd/2)
   echo "sudo apt install perl" >> $(readlink /proc/$$/fd/2)
  exit 1
  fi
  
  if ! command -v parallel &> /dev/null
  then
   echo "parallel not installed" >> $(readlink /proc/$$/fd/2)
   echo "Install using:" >> $(readlink /proc/$$/fd/2)
   echo "sudo apt install parallel" >> $(readlink /proc/$$/fd/2)
  exit 1
  fi
  
  # Time function
  function show_time () {
    num=$1
    min=0
    hour=0
    day=0
    if((num>59));then
        ((sec=num%60))
        ((num=num/60))
        if((num>59));then
            ((min=num%60))
            ((num=num/60))
            if((num>23));then
                ((hour=num%24))
                ((day=num/24))
            else
                ((hour=num))
            fi
        else
            ((min=num))
        fi
    else
        ((sec=num))
    fi
    echo "$day"d "$hour"h "$min"m "$sec"s >> $(readlink /proc/$$/fd/2)
}

  # Translation function
  function translate(){
	while read seq
	do
	echo $seq |
	awk '{print tolower($0)}' | 
	sed --regexp-extended \
        's/a[tu]g/M/g;
         s/a[tu][tuc]/I/g;
         s/ac[actug]/T/g;
         s/aa[tuc]/N/g;
         s/aa[ag]/K/g;
         s/ag[tuc]/S/g;
         s/[tu][tu][tuc]/F/g;
         s/[tu][tu][ag]/L/g;
         s/[tu]c[acgtu]/S/g;
         s/[tu]a[tuc]/Y/g;
         s/[tu]a[ag]/*/g;
         s/[tu]g[tuc]/C/g;
         s/[tu]gg/W/g;
         s/cc[acgtu]/P/g;
         s/ca[tuc]/H/g;
         s/ca[ag]/Q/g;
         s/cg[gtu]/R/g;
         s/g[tu][acgtu]/V/g;
         s/gc[acgtu]/A/g;
         s/ga[tcu]/D/g;
         s/ga[ag]/E/g;
         s/gg[acgtu]/G/g' |
         
         # Standard code
         if [[ $translate_table = 1 ]]
         then
          sed --regexp-extended \
           's/a[tu]a/I/g;
            s/ag[ag]/R/g;
            s/c[tu][acgtu]/L/g;
            s/cg[ac]/R/g;
            s/[tu]ga/*/g;'
       
         # Vertebrate mitochondrial code
         elif [[ $translate_table = 2 ]]
         then
          sed --regexp-extended \
           's/a[tu]a/M/g;
            s/ag[ag]/*/g;
            s/c[tu][acgtu]/L/g;
            s/cg[ac]/R/g;
            s/[tu]ga/W/g;'
       
         # Yeast mitochondrial code
         elif [[ $translate_table = 3 ]]
          then
          sed --regexp-extended \
           's/a[tu]a/M/g;
            s/ag[ag]/R/g;
            s/c[tu][acgtu]/T/g;
            s/cg[ac]/X/g;
            s/[tu]ga/W/g;'
       
         # Mold, protozoan, and coelenterate mitochondrial code and the mycoplasma/spiroplasma code
         elif [[ $translate_table = 4 ]]
          then
           sed --regexp-extended \
            's/a[tu]a/I/g;
             s/ag[ag]/R/g;
             s/c[tu][acgtu]/L/g;
             s/cg[ac]/R/g;
             s/[tu]ga/M/g;'
          else
           echo "Error: Unknown translation code"
           tables
           exit 1
         fi
     done
}
  
  # Frame exception
  if [ $frame -lt 0 ] || [ $frame -gt 3 ]
  then
   echo "Frame value must be 0, 1, 2 or 3"
   print_usage
   exit 1
  fi
  
  if [ $frame -eq 0 ]
  then
   unset $complement
   unset $rev_seq
  fi
  
  # Disable translate
  if [ ! -z ${percent_GC+x} ]
  then
   unset translate
  fi
  
    # Get input files
    if [ $# -ge 1 -a -f "$1" ]
    then
    FILE="$1"
    else
    stdin=1
    FILE=$(mktemp)
    cat /dev/stdin > $FILE
    fi

    HEADERS=$(mktemp)
    INFILE=$(mktemp)
    OUTFILE=$(mktemp)
    
    if [ ! -z ${verbose+x} ]; then echo -en "Using "$threads" thread(s)...\n\n" >> $(readlink /proc/$$/fd/2); fi

    parallel -a $FILE -k -j"$threads" --block 30M --pipepart 'grep --perl-regexp "^>"' |
    sed --regexp-extended 's/\r//g' > $HEADERS
    
    if [[ $(grep --count --perl-regexp "^>" $FILE) != $(grep --count --perl-regexp --invert-match "^>" $FILE) ]]
    then
    
     if [ ! -z ${verbose+x} ]; then echo "FASTA file is NOT single line" >> $(readlink /proc/$$/fd/2); fi
     if [ ! -z ${check_sl+x} ]; then exit 1; fi


    if [[ $lettercase = 0 ]]
    then
     if [ ! -z ${verbose+x} ]; then echo "Converting to single line FASTA..." >> $(readlink /proc/$$/fd/2); fi
     sed --regexp-extended 's/\r//g' $FILE |
     perl -pe '$. > 1 and /^>/ ? print "\n" : chomp' |
     grep --perl-regexp --invert-match "^>" > $OUTFILE
     
    # Convert to upper-case
    elif [[ $lettercase = 1 ]]
     then
      if [ ! -z ${verbose+x} ]; then echo "Converting to upper-case single line FASTA..." >> $(readlink /proc/$$/fd/2); fi
      sed --regexp-extended 's/\r//g' $FILE |
      perl -pe '$. > 1 and /^>/ ? print "\n" : chomp' |
      grep --perl-regexp --invert-match "^>" |
      tr "[:lower:]" "[:upper:]" > $OUTFILE
      
    # Convert to lower-case
     elif [[ $lettercase = 2 ]]
      then
       if [ ! -z ${verbose+x} ]; then echo "Converting to lower-case single line FASTA..." >> $(readlink /proc/$$/fd/2); fi
       sed --regexp-extended 's/\r//g' $FILE |
       perl -pe '$. > 1 and /^>/ ? print "\n" : chomp' |
       grep --perl-regexp --invert-match "^>" |
       tr "[:upper:]" "[:lower:]" > $OUTFILE
      
    fi
     if [ ! -z ${verbose+x} ]
     then
      echo -n "Single line conversion done: " >> $(readlink /proc/$$/fd/2)
      show_time $(($(date +%s) - time_start))
      echo "" >> $(readlink /proc/$$/fd/2)
     fi
     
    # Skip single line conversion
    else
    
    # Just load single-line sequences
    
     if [ ! -z ${verbose+x} ]; then echo "FASTA file is single line" >> $(readlink /proc/$$/fd/2); fi
     if [ ! -z ${check_sl+x} ]; then exit 0; fi
     if [ ! -z ${verbose+x} ]; then echo "Skipping single line FASTA conversion..." >> $(readlink /proc/$$/fd/2); fi
    if [[ $lettercase = 0 ]]
    then
     parallel -a $FILE -k -j"$threads" --block 30M --pipepart 'grep --perl-regexp --invert-match "^>"' \
     > $OUTFILE
    elif [[ $lettercase = 1 ]]
    then
     if [ ! -z ${verbose+x} ]; then echo "Converting to upper-case FASTA..." >> $(readlink /proc/$$/fd/2); fi
     parallel -a $FILE -k -j"$threads" --block 30M --pipepart 'grep --perl-regexp --invert-match "^>"' |
     tr "[:lower:]" "[:upper:]" > $OUTFILE
    elif [[ $lettercase = 2 ]]
    then
     if [ ! -z ${verbose+x} ]; then echo "Converting to lower-case FASTA..." >> $(readlink /proc/$$/fd/2); fi
     parallel -a $FILE -k -j"$threads" --block 30M --pipepart 'grep --perl-regexp --invert-match "^>"' |
     tr "[:upper:]" "[:lower:]" > $OUTFILE
    fi
    if [ ! -z ${verbose+x} ]
     then
      echo -n "Loading sequence done: " >> $(readlink /proc/$$/fd/2)
      show_time $(($(date +%s) - time_start))
      echo "" >> $(readlink /proc/$$/fd/2)
     fi
    fi
    
     # Convert to Multi-line FASTA
    if [ ! -z ${multi+x} ]
     then
     if [ ! -z ${verbose+x} ]; then echo "Converting to multi line FASTA..." >> $(readlink /proc/$$/fd/2); fi
     SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
     paste $HEADERS $INFILE |
     grep --perl-regexp --invert-match "\t$" |
     tr "\t" "\n" |
      if [ $(grep --count --perl-regexp --ignore-case "^>.+[ACTGU]{$multi_length}" $HEADERS) -eq 0 ]
      then
       sed --regexp-extended "s/\r//g; s/([ACTGUactgu]{$multi_length})/\1\n/g"
      else
       awk -F "" -v multi_length="$multi_length" '/>/{print $0}; !/>/{for(i=1; i<=NF; i+=multi_length) {print substr($0,i,multi_length);}}'
      fi > $OUTFILE
      # Output to file or stdout
    if [ ! -z ${out+x} ]
    then
     if [ ! -z ${verbose+x} ]
     then
      echo $(basename $1)" ---> "$output_file >> $(readlink /proc/$$/fd/2)
     fi
     cp --force $OUTFILE $output_file
    else
     if [ ! -z ${inplace+x} ]
     then
      cp --force $OUTFILE $FILE
     else
      cat $OUTFILE
     fi
    fi
    
    # Cleanup temp files
    rm --force $OUTFILE $INFILE $HEADERS
    if [ ! -z ${stdin+x} ]
    then
     rm --force $FILE
    fi
    
    if [ ! -z ${verbose+x} ]
    then
     echo -ne "\nMulti line conversion done: " >> $(readlink /proc/$$/fd/2)
     show_time $(($(date +%s) - time_start)) >> $(readlink /proc/$$/fd/2)
    fi
    exit 0
    fi
    
    if [ ! -z ${nonnuc+x} ]
    then
     SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
     paste <(cat $HEADERS | tr -d ">") <(cat $INFILE | tr -d "ACTGUactgu" | awk '{print length($0)}') |
     grep --invert-match --perl-regexp "\t0"
     if [ ! -z ${verbose+x} ]
      then
       echo -n "Non-ACTGU done: " >> $(readlink /proc/$$/fd/2)
       show_time $(($(date +%s) - time_start))
       echo "" >> $(readlink /proc/$$/fd/2)
      fi
     exit 0
    fi
    
    if [ ! -z ${stats+x} ]
    then
     lengths=$(mktemp)
     awk '{print length($0)}' $OUTFILE | sort -rn > $lengths
     total=$(awk '{OFS="\t"}; {sum+=$0}; END{printf "%.0f", sum}' $lengths)
     n50_idx=$(awk '{OFS="\t"}; {sum+=$0}; {printf "%s%s%.0f\n", NR,OFS,sum}' $lengths | awk -v total=$total -F $'\t' '{if($2 > (total*0.5))printf "%.0f\n", $1}' | head -1)
     n90_idx=$(awk '{OFS="\t"}; {sum+=$0}; {printf "%s%s%.0f\n", NR,OFS,sum}' $lengths | awk -v total=$total -F $'\t' '{if($2 > (total*0.9))printf "%.0f\n", $1}' | head -1)
     num_seq=$(cat $lengths | wc -l)
     half_num=$(awk -v num_seq=$num_seq 'NR==(int(num_seq/2)+1){printf $0}' $lengths)
     echo -e "Total length\t"$total >> $(readlink /proc/$$/fd/2)
     echo -e "Sequence #\t"$num_seq >> $(readlink /proc/$$/fd/2)
     echo -e "Longest sequence\t"$(head -1 $lengths) >> $(readlink /proc/$$/fd/2)
     echo -e "Shortest sequence\t"$(tail -1 $lengths) >> $(readlink /proc/$$/fd/2)
     echo -e "Median\t"$(awk -v num_seq=$num_seq -v half_num=$half_num 'NR==int(num_seq/2){if(num_seq/2 == int(num_seq/2)) printf "%.1f", ($0+half_num)/2; else printf "%.0f", $0}' $lengths) >> $(readlink /proc/$$/fd/2)
     echo -e "Mean\t"$(bc <<< "scale=2; $total/$num_seq") >> $(readlink /proc/$$/fd/2)
     echo -e "GC%\t"$(bc <<< "scale=2; $(cat $OUTFILE | tr -d "\n" | tr -d "[AaTtUu]" | wc -m)*100/$(cat $OUTFILE | tr -d "\n" | wc -m)") >> $(readlink /proc/$$/fd/2)
     echo -e "N50\t"$(awk -v n50_idx=$n50_idx 'NR==n50_idx{printf "%.0f", $0}' $lengths) >> $(readlink /proc/$$/fd/2)
     echo -e "L50\t"$n50_idx >> $(readlink /proc/$$/fd/2)
     echo -e "N90\t"$(awk -v n90_idx=$n90_idx 'NR==n90_idx{printf "%.0f", $0}' $lengths) >> $(readlink /proc/$$/fd/2)
     echo -e "L90\t"$n90_idx >> $(readlink /proc/$$/fd/2)
     rm --force $lengths
     exit 0
    fi
    
    if [ ! -z ${complement+x} ] || [ ! -z ${rna_dna+x} ] || [ ! -z ${random+x} ]
    then
     MOL=$(mktemp)
     export OUTFILE
     export MOL
     parallel -j2 --halt now,success=1 ::: \
     'grep --ignore-case --max-count=1 "T" $OUTFILE > /dev/null && echo "DNA" > $MOL' \
     'grep --ignore-case --max-count=1 "U" $OUTFILE > /dev/null && echo "RNA" > $MOL' &> /dev/null
     MOLECULE=$(cat $MOL)
    fi
     
     if [ ! -z ${random+x} ]
     then
      SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
      if [[ $MOLECULE = "DNA" ]]
      then
       awk -F $'\t' '{print system("tr -dc atcg < /dev/urandom | head -c "length($0))}' $INFILE |
      tr -d 0 > $OUTFILE
      else
       awk -F $'\t' '{print system("tr -dc aucg < /dev/urandom | head -c "length($0))}' $INFILE |
      tr -d 0 > $OUTFILE
      fi
      if [ ! -z ${verbose+x} ]
      then
       echo -n "Random sequence done: " >> $(readlink /proc/$$/fd/2)
       show_time $(($(date +%s) - time_start))
       echo "" >> $(readlink /proc/$$/fd/2)
      fi
     fi

     # Get complementary sequences
     if [ ! -z ${complement+x} ]
     then
      if [ ! -z ${verbose+x} ]
      then
       echo "Converting to complement sequence..." >> $(readlink /proc/$$/fd/2)
      fi
      SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
      if [[ $MOLECULE = "DNA" ]]
      then
       parallel -a $INFILE -k -j"$threads" --block 30M --pipepart 'tr \"ATCGatcg\" \"TAGCtagc\"' > $OUTFILE
      else
       parallel -a $INFILE -k -j"$threads" --block 30M --pipepart 'tr \"AUCGaucg\" \"UAGCuagc\"' > $OUTFILE
      fi
      if [ ! -z ${verbose+x} ]
      then
       echo -n "Complement conversion done: " >> $(readlink /proc/$$/fd/2)
       show_time $(($(date +%s) - time_start))
       echo "" >> $(readlink /proc/$$/fd/2)
      fi
     fi
     
     # DNA-to-RNA or RNA-to-DNA
     if [ ! -z ${rna_dna+x} ]
     then
      SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
      if [[ $MOLECULE = "DNA" ]]
      then
       if [ ! -z ${verbose+x} ]
       then
        echo "Converting DNA to RNA sequence..." >> $(readlink /proc/$$/fd/2)
       fi
       parallel -a $INFILE -k -j"$threads" --block 30M --pipepart 'tr \"Tt\" \"Uu\"' > $OUTFILE
       if [ ! -z ${verbose+x} ]
       then
        echo -n "DNA-to-RNA conversion done: " >> $(readlink /proc/$$/fd/2)
        show_time $(($(date +%s) - time_start))
        echo "" >> $(readlink /proc/$$/fd/2)
       fi
      else
       if [ ! -z ${verbose+x} ]
       then
        echo "Converting RNA to DNA sequence..." >> $(readlink /proc/$$/fd/2)
       fi
       parallel -a $INFILE -k -j"$threads" --block 30M --pipepart 'tr \"Uu\" \"Tt\"' > $OUTFILE
       if [ ! -z ${verbose+x} ]
       then
        echo -n "RNA-to-DNA conversion done: " >> $(readlink /proc/$$/fd/2)
        show_time $(($(date +%s) - time_start))
        echo "" >> $(readlink /proc/$$/fd/2)
       fi
      fi
     fi

     # Get reverse sequences
     if [ ! -z ${rev_seq+x} ]
     then
      if [ ! -z ${verbose+x} ]
      then
       echo "Converting to reverse sequence..." >> $(readlink /proc/$$/fd/2)
      fi
      SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
      parallel -a $INFILE -k -j"$threads" --block 30M --pipepart 'rev' > $OUTFILE
      if [ ! -z ${verbose+x} ]
      then
       echo -n "Reverse conversion done: " >> $(readlink /proc/$$/fd/2)
       show_time $(($(date +%s) - time_start))
       echo "" >> $(readlink /proc/$$/fd/2)
      fi
     fi
     
     # Change frame
     if ([ $frame -gt 1 ] && [ ! -z ${translate+x} ]) || ([ $frame -gt 1 ] && [ ! -z ${orf+x} ])
     then
      sed --in-place --regexp-extended 's/^.{'"$(($frame - 1))"'}//g' $OUTFILE
     fi

     if [ ! -z ${orf+x} ]
     then
     if [ ! -z ${verbose+x} ] && [ ! -z ${orf+x} ]
     then
      echo "ORF | frame "$frame >> $(readlink /proc/$$/fd/2)
     fi
     if [ ! -z ${verbose+x} ] && [ ! -z ${translate+x} ]
     then
      echo "Translate | frame "$frame >> $(readlink /proc/$$/fd/2)
     fi
     if [ ! -z ${verbose+x} ] && [ $translate_table -ne 1 ]
     then
      echo "Translation code: "$translate_table >> $(readlink /proc/$$/fd/2)
     fi
     if [ ! -z ${verbose+x} ] && [ ! -z ${min_prot+x} ]
     then
      echo "Minimum protein length: "$min_prot_length >> $(readlink /proc/$$/fd/2)
     fi
     
     SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
     
     function get_orfs(){
     
     local SWITCH
     local ORFstart=$1
     local ORFend=$2
     local orf_core=$3
     local ORFHEADERS=$(mktemp)
     local ORFFILE1=$(mktemp)
     local ORFFILE2=$(mktemp)
     local ORFFILE3=$(mktemp)
     local ORFHEADERS2=$(mktemp)
     
     if [[ $threads != 1 ]]
     then
      sed --quiet ''"$ORFstart"','"$ORFend"'p;'"$(($ORFend + 1))"'q' $4 > $ORFFILE1
      sed --quiet ''"$ORFstart"','"$ORFend"'p;'"$(($ORFend + 1))"'q' $5 > $ORFHEADERS
     else
      cp -f $4 $ORFFILE1
      cp -f $5 $ORFHEADERS
     fi
     
      # Separate codons and cut to first start and stop codon
      local orf_num=1
      awk -F '' '{for(i=1; i<=NF; i+=3) {printf "%s%s ", $i,$(i+1)$(i+2);}; print ""}' $ORFFILE1 |
      awk -F $'\t' '{if(match(tolower($0),"a[tu]g") > 0) print substr($0,match(tolower($0),"a[tu]g"));
      if(match(tolower($0),"a[tu]g") == 0) print ""}' |
      tee $ORFFILE3 |
      awk -F $'\t' '{if(match(tolower($0),"[tu]a[ag]|[tu]ga") > 0) print substr($0,1,match(tolower($0),"[tu]a[ag]|[tu]ga")+2);
      if(match(tolower($0),"[tu]a[ag]|[tu]ga") == 0) print $0}' |
      if [ ! -z ${translate+x} ]
      then
       translate |
       sed --regexp-extended 's/[actgu]//g' |
       tr -d " " |
       if [ ! -z ${min_prot+x} ]
       then
        awk -v min_prot_length="$min_prot_length" '{if(match($0,"*|$") - 1 >= min_prot_length) print $0;
        if(match($0,"*|$") - 1 < min_prot_length) print ""}'
       else
        cat
       fi
      else
       tr -d " "
      fi > $ORFFILE2
      awk -F $'\t' -v orf_num="$orf_num" '{print $0"_orf"orf_num}' $ORFHEADERS > $ORFHEADERS2
      SWITCH=$ORFFILE1; ORFFILE1=$ORFFILE3; ORFFILE3=$SWITCH

      # Loop over other ORFs
      while [ $(grep --ignore-case --perl-regexp --count "a[tu]g" $ORFFILE1) -ne 0 ]
      do
      ((orf_num++))
      if [ $threads -gt 0 ] && [ ! -z ${max_orf_num+x} ] && [ $orf_num -gt $max_orf_num ]
      then
       break
      fi
      
       : > $ORFFILE3
       
       # Cut until first start and stop codon or until end of line
       awk -F $'\t' '{if(match(tolower($0),"[tu]a[ag]|[tu]ga") > 0) print substr($0,match(tolower($0),"[tu]a[ag]|[tu]ga")+4);
       if(match(tolower($0),"[tu]a[ag]|[tu]ga") == 0) print ""}' $ORFFILE1 |
       awk -F $'\t' '{if(match(tolower($0),"a[tu]g") > 0) print substr($0,match(tolower($0),"a[tu]g"));
       if(match(tolower($0),"a[tu]g") == 0) print ""}' |
       tee $ORFFILE3 |
       awk -F $'\t' '{if(match(tolower($0),"[tu]a[ag]|[tu]ga") > 0) print substr($0,1,match(tolower($0),"[tu]a[ag]|[tu]ga")+2);
       if(match(tolower($0),"[tu]a[ag]|[tu]ga") == 0) print ""}' |
       if [ ! -z ${translate+x} ]
       then
        translate |
        sed --regexp-extended 's/[actgu]//g' |
        tr -d " " |
        if [ ! -z ${min_prot+x} ]
        then
         awk -v min_prot_length="$min_prot_length" '{if(match($0,"*|$") - 1 >= min_prot_length) print $0;
         if(match($0,"*|$") - 1 < min_prot_length) print ""}'
        else
         cat
        fi
       else
        tr -d " "
       fi >> $ORFFILE2
       awk -F $'\t' -v orf_num="$orf_num" '{print $0"_orf"orf_num}' $ORFHEADERS >> $ORFHEADERS2
       SWITCH=$ORFFILE1; ORFFILE1=$ORFFILE3; ORFFILE3=$SWITCH
       
      done
      
      cat $ORFHEADERS2 >> $HEADERS_TMP
      cat $ORFFILE2 >> $OUTFILE
      
      # Cleanup
      rm --force $ORFFILE1 $ORFFILE2 $ORFFILE3 $ORFHEADERS $ORFHEADERS2
     }
     
     # Set Minimum protein length if minimum nucleotide size is set
     if [ ! -z ${min_max_seq_length+x} ] && [ ! -z ${translate+x} ]
     then
      min_prot=1
      min_prot_length=$((${min_max_seq_length[0]}/3))
     fi
     
     # Allocate sequences to requested threads
     seq_num=$(grep --perl-regexp --count "^>" $HEADERS)
     if [[ $seq_num -lt $threads ]]
     then
      threads=$seq_num
     fi
     
     # Setup start and end lines for dividing sequences
     BATCH=$(( seq_num / $threads ))
     remainder=$(( seq_num % $threads ))
     
     start=1
     end=()
     for ((core=0;core <= $(($threads - 1));core++))
     do
      if [[ ${#end[@]} != 0 ]]
      then
       start=(${start[@]} $((${end[$(($core - 1))]} + 1)))
      fi
      if [[ $core -lt $remainder ]]
      then
       end=(${end[@]} $((${start[$core]} + $BATCH)))
      else
       end=(${end[@]} $((${start[$core]} + $BATCH - 1)))
      fi
     done
     
     # Loop for function getting ORFs for multithreading
     HEADERS_TMP=$(mktemp)
     : > $OUTFILE
     : > $HEADERS_TMP
     
     if [ $frame -ne 0 ]
     then
      for ((core=0;core <= $(($threads - 1));core++))
      do
       get_orfs ${start[$core]} ${end[$core]} $core $INFILE $HEADERS &
       pids[$core]=$!
      done     
      for pid in ${pids[*]}
      do
       wait $pid
      done
     else
      INFILE_revcomp=$(mktemp)
      HEADERS_frame=$(mktemp)
      HEADERS_frame_rev=$(mktemp)
      parallel -a $INFILE -k -j"$threads" --block 30M --pipepart 'rev' |
      parallel -k -j"$threads" --block 30M --pipe 'tr \"ATCGUatcgu\" \"TAGCAtagca\"' \
      > $INFILE_revcomp
      for ((frame_set=1;$frame_set<=3;frame_set++))
      do
      if [ $frame_set -gt 1 ]
      then
       sed --in-place --regexp-extended 's/^.//g' $INFILE
       sed --in-place --regexp-extended 's/^.//g' $INFILE_revcomp
      fi
       sed --regexp-extended 's/(.+)/\1_frame'"$(($frame_set))"'/g' $HEADERS > $HEADERS_frame
       sed --regexp-extended 's/(.+)/\1_frame_'"$(($frame_set*2))"'_rev/g' $HEADERS > $HEADERS_frame_rev
      for ((core=0;core <= $(($threads - 1));core++))
      do
       get_orfs ${start[$core]} ${end[$core]} $core $INFILE $HEADERS_frame &
       pids[$core]=$!
      done
      for pid in ${pids[*]}
      do
       wait $pid
      done
      for ((core=0;core <= $(($threads - 1));core++))
      do
       get_orfs ${start[$core]} ${end[$core]} $core $INFILE_revcomp $HEADERS_frame_rev &
       pids[$core]=$!
      done
     
      for pid in ${pids[*]}
      do
       wait $pid
      done
      done
      
      # Cleanup
      rm --force $INFILE_revcomp $HEADERS_frame $HEADERS_frame_rev
     fi
     
     rm --force $HEADERS
     HEADERS=$HEADERS_TMP

     if [ ! -z ${verbose+x} ] && [ -z ${translate+x} ]
     then
      echo -n "ORF detection done: " >> $(readlink /proc/$$/fd/2)
      show_time $(($(date +%s) - time_start))
      echo "" >> $(readlink /proc/$$/fd/2)
     fi
     if [ ! -z ${verbose+x} ] && [ ! -z ${translate+x} ]
     then
      echo -n "ORF detection and translation done: " >> $(readlink /proc/$$/fd/2)
      show_time $(($(date +%s) - time_start))
      echo "" >> $(readlink /proc/$$/fd/2)
     fi
    fi
    
    # Minimum/Maximum length (nucleotie)
     if [ ! -z ${min_max_seq_length+x} ] && [ -z ${translate+x} ]
     then
     if [ ${min_max_seq_length[0]} -gt 0 ] || [ ${min_max_seq_length[1]} -gt 0 ]
     then
     SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
     if [ ${min_max_seq_length[1]} -eq 0 ]
     then
       awk -v min_seq_length="${min_max_seq_length[0]}" '{if(length($0) - 1 >= min_seq_length) print $0;
       else print ""}' $INFILE > $OUTFILE
     else
      awk -v min_seq_length="${min_max_seq_length[0]}" -v max_seq_length="${min_max_seq_length[1]}" '{if(length($0) - 1 >= min_seq_length && length($0) - 1 <= max_seq_length) print $0;
      else print ""}' $INFILE > $OUTFILE
     fi
     fi
     fi
    
    # Separate to codons and translate
    if [ ! -z ${translate+x} ] && [ -z ${orf+x} ]
    then
     SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
     if [ ! -z ${verbose+x} ]
     then
      echo "Translate | frame "$frame >> $(readlink /proc/$$/fd/2)
     fi
     if [ ! -z ${verbose+x} ] && [ $translate_table -ne 1 ]
     then
      echo "Translation code: "$translate_table >> $(readlink /proc/$$/fd/2)
     fi
     if [ ! -z ${verbose+x} ] && [ ! -z ${min_prot+x} ]
     then
      echo "Minimum protein length: "$min_prot_length >> $(readlink /proc/$$/fd/2)
     fi
     awk -F '' '{for(i=1; i<=NF; i+=3) {printf "%s%s ", $i,$(i+1)$(i+2);}; print ""}' $INFILE |
      translate |
       sed --regexp-extended 's/[atcgu]{1,}$//g' |
       tr -d " " |
       
       # remove if less than cutoff
       if [ ! -z ${min_prot+x} ]
       then
        awk -v min_prot_length="$min_prot_length" '{if(match($0,"*|$") - 1 >= min_prot_length) print $0;
        if(match($0,"*|$") - 1 < min_prot_length) print ""}'
       else
        cat
       fi > $OUTFILE
       if [ ! -z ${verbose+x} ]
       then
        echo -n "Translation done: " >> $(readlink /proc/$$/fd/2)
        show_time $(($(date +%s) - time_start))
        echo "" >> $(readlink /proc/$$/fd/2)
       fi
    fi
    
     # GC content
     if [ ! -z ${verbose+x} ] && [ ! -z ${percent_GC+x} ]
     then
      echo "Percent GC" >> $(readlink /proc/$$/fd/2)
     fi
     
     if [ ! -z ${percent_GC+x} ]
     then
     SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
      paste <(cat $HEADERS | tr -d ">") <(awk '{var=length($0);gsub("[AaTt]","",$0);print length($0)/var*100}' $INFILE)
      if [ ! -z ${verbose+x} ]
      then
       echo -n "GC fraction done: " >> $(readlink /proc/$$/fd/2)
       show_time $(($(date +%s) - time_start))
       echo "" >> $(readlink /proc/$$/fd/2)
      fi
      exit 0
     fi
     
     # Combine headers and sequences
     SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
     paste $HEADERS $INFILE |
     grep --perl-regexp --invert-match "\t$" > $OUTFILE

     
     if [ ! -z ${unique+x} ]
     then
      SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
      sort --ignore-case --parallel="$threads" --unique --key=2 $INFILE > $OUTFILE
      if [ ! -z ${verbose+x} ]
      then
       echo -n "Remove duplicates done: " >> $(readlink /proc/$$/fd/2)
       show_time $(($(date +%s) - time_start))
      fi
     fi
          
     # Sort by name
     if [ ! -z ${name_sort+x} ]
     then
     if [ ! -z ${verbose+x} ]
     then
      echo "Sort by name" >> $(readlink /proc/$$/fd/2)
     fi
      SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
      if [ ! -z ${reverse_sort+x} ]
      then
      if [ ! -z ${verbose+x} ]
      then
       echo "Sort in reverse order" >> $(readlink /proc/$$/fd/2)
      fi
       sort --parallel="$threads" --reverse --field-separator=$'\t' --key=1 $INFILE > $OUTFILE
      else
       sort --parallel="$threads" --field-separator=$'\t' --key=1 $INFILE > $OUTFILE
      fi
      if [ ! -z ${verbose+x} ]
      then
       echo -n "Name sort done: " >> $(readlink /proc/$$/fd/2)
       show_time $(($(date +%s) - time_start))
       echo "" >> $(readlink /proc/$$/fd/2)
      fi
     fi
    
    # Sort by sequence length
     if [ ! -z ${length_sort+x} ]
     then
      if [ ! -z ${verbose+x} ]
      then
       echo "Sort by length" >> $(readlink /proc/$$/fd/2)
      fi
      SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH    
      awk -F '\t' '{OFS="\t"; print length($2),$0}' $INFILE |
      if [ ! -z ${reverse_sort+x} ]
      then
      if [ ! -z ${verbose+x} ]
      then
       echo "Sort in reverse order" >> $(readlink /proc/$$/fd/2)
      fi
       sort --parallel="$threads" --numeric-sort --reverse
      else
       sort --parallel="$threads" --numeric-sort
      fi |
      cut --fields=2,3 > $OUTFILE
      if [ ! -z ${verbose+x} ]
      then
       echo -n "Length sort done: " >> $(readlink /proc/$$/fd/2)
       show_time $(($(date +%s) - time_start))
       echo "" >> $(readlink /proc/$$/fd/2)
      fi
     fi
     
     # Separate sequences into files
     if [ ! -z ${separate+x} ]
     then
     echo "Separating sequences into files..." >> $(readlink /proc/$$/fd/2)
      if [ ! -d $separate ]
      then
       mkdir -p $separate
      fi
      for ((k=1;k<=$(cat $OUTFILE | wc -l);k++))
      do
       cut -f1 $OUTFILE | sed --quiet ''"$k"','"$k"'p;'"$(($k + 1))"'q' > $separate/$k.fasta
       cut -f2 $OUTFILE | sed --quiet ''"$k"','"$k"'p;'"$(($k + 1))"'q' >> $separate/$k.fasta
      done
      if [ ! -z ${verbose+x} ]
      then
       echo -en "\nSequence separation done: " >> $(readlink /proc/$$/fd/2)
       show_time $(($(date +%s) - time_start))
      fi
      exit 0
     fi
     
     # Convert tabbed to FASTA
     SWITCH=$OUTFILE; OUTFILE=$INFILE; INFILE=$SWITCH
     cat $INFILE |
     tr "\t" "\n" > $OUTFILE
     
    # Output to file or stdout
    if [ ! -z ${out+x} ]
    then
     if [ ! -z ${verbose+x} ]
     then
      echo $(basename $1)" ---> "$output_file >> $(readlink /proc/$$/fd/2)
     fi
     cp --force $OUTFILE $output_file
    else
     if [ ! -z ${inplace+x} ]
     then
      cp --force $OUTFILE $FILE
     else
      cat $OUTFILE
     fi
    fi
    
    # Cleanup temp files
    rm --force $INFILE $OUTFILE $HEADERS $MOL
    if [ ! -z ${stdin+x} ]
    then
     rm --force $FILE
    fi
    
    if [ ! -z ${verbose+x} ]
    then
     echo -ne "\nfastakit done: " >> $(readlink /proc/$$/fd/2)
     show_time $(($(date +%s) - time_start)) >> $(readlink /proc/$$/fd/2)
    fi
